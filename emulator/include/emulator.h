#ifndef EMULATOR_H
#define EMULATOR_H

#include <stdlib.h>
#include <stdio.h>
#include <stdint.h>
#include <string.h>

#include <pthread.h>

#define PROCCESSOR_SPEED_HZ 10000
#define DEFINE_INSTRUCTION(name, args) {name, args}

extern int _varient;

extern FILE* input_file;
extern uint8_t memory[];
extern uint8_t emulator_running;

extern uint32_t registers[];
extern struct flags cflags;

extern uint8_t _disassemble;
extern long _file_size;

extern pthread_t process_thread;

struct instruction {
	char* name;
	int argc;
};

struct argument {
	uint8_t instruction : 1;
	uint8_t type : 4;
	uint8_t length : 2;
	uint8_t cast : 2;
	uint8_t offset : 1;
	uint8_t info_byte;
	uint32_t value;
};

struct flags {
	uint8_t zero : 1;
	uint8_t carry : 1;
	uint8_t overflow : 1;
};

enum {
	ZERO_ARGUMENTS,
	ONE_ARGUMENT,
	TWO_ARGUMENTS,
	N_ARGUMENTS,
	ARGUMENTS_MAX
};

enum {
	SZ_DWORD,
	SZ_WORD,
	SZ_BYTE
};

enum {
	CODE_RVALUE,
	CODE_PVALUE,
	CODE_RREG,
	CODE_PREG	
};

// ISA for V3 encoding
enum {
	V3_I_NOP_INSTRUCTION,
	V3_I_MOV_INSTRUCTION,
	V3_I_ADD_INSTRUCTION,
	V3_I_SUB_INSTRUCTION,
	V3_I_MUL_INSTRUCTION,
	V3_I_DIV_INSTRUCTION,
	V3_I_OR_INSTRUCTION,
	V3_I_AND_INSTRUCTION,
	V3_I_NOT_INSTRUCTION,
	V3_I_SHR_INSTRUCTION,
	V3_I_SHL_INSTRUCTION,
	V3_I_CMP_INSTRUCTION,
	V3_I_INT_INSTRUCTION,
	V3_I_SIVTE_INSTRUCTION, // Will not jump to 0 addresses 
	V3_I_JMP_INSTRUCTION,
	V3_I_CALL_INSTRUCTION,
	V3_I_RET_INSTRUCTION,
	V3_I_JE_INSTRUCTION,
	V3_I_JNE_INSTRUCTION,
	V3_I_JG_INSTRUCTION,
	V3_I_JGE_INSTRUCTION,
	V3_I_JL_INSTRUCTION,
	V3_I_JLE_INSTRUCTION,
	V3_I_JC_INSTRUCTION,
	V3_I_JNC_INSTRUCTION,
	V3_I_JZ_INSTRUCTION,
	V3_I_JNZ_INSTRUCTION,
	V3_I_PUSH_INSTRUCTION,
	V3_I_POP_INSTRUCTION,
	V3_I_DB_INSTRUCTION,
	V3_I_DS_INSTRUCTION,
	V3_I_INSTRUCTION_MAX
};

static const struct instruction V3_ISA[] = {
	[V3_I_NOP_INSTRUCTION] =   DEFINE_INSTRUCTION("NOP", ZERO_ARGUMENTS),
	[V3_I_MOV_INSTRUCTION] =   DEFINE_INSTRUCTION("MOV", TWO_ARGUMENTS),
	[V3_I_ADD_INSTRUCTION] =   DEFINE_INSTRUCTION("ADD", TWO_ARGUMENTS),
	[V3_I_SUB_INSTRUCTION] =   DEFINE_INSTRUCTION("SUB", TWO_ARGUMENTS),
	[V3_I_MUL_INSTRUCTION] =   DEFINE_INSTRUCTION("MUL", TWO_ARGUMENTS),
	[V3_I_DIV_INSTRUCTION] =   DEFINE_INSTRUCTION("DIV", TWO_ARGUMENTS),
	[V3_I_OR_INSTRUCTION] =    DEFINE_INSTRUCTION("OR",  TWO_ARGUMENTS),
	[V3_I_AND_INSTRUCTION] =   DEFINE_INSTRUCTION("AND", TWO_ARGUMENTS),
	[V3_I_NOT_INSTRUCTION] =   DEFINE_INSTRUCTION("NOT", ONE_ARGUMENT),
	[V3_I_SHR_INSTRUCTION] =   DEFINE_INSTRUCTION("SHR", TWO_ARGUMENTS),
	[V3_I_SHL_INSTRUCTION] =   DEFINE_INSTRUCTION("SHL", TWO_ARGUMENTS),
	[V3_I_CMP_INSTRUCTION] =   DEFINE_INSTRUCTION("CMP", TWO_ARGUMENTS),

	[V3_I_INT_INSTRUCTION] =   DEFINE_INSTRUCTION("INT",   ONE_ARGUMENT),
	[V3_I_SIVTE_INSTRUCTION] = DEFINE_INSTRUCTION("SIVTE", TWO_ARGUMENTS),
	[V3_I_RET_INSTRUCTION] =   DEFINE_INSTRUCTION("RET",   ZERO_ARGUMENTS),
	[V3_I_JMP_INSTRUCTION] =   DEFINE_INSTRUCTION("JMP",  ONE_ARGUMENT),
	[V3_I_CALL_INSTRUCTION] =  DEFINE_INSTRUCTION("CALL", ONE_ARGUMENT),

	[V3_I_JE_INSTRUCTION] =    DEFINE_INSTRUCTION("JE",  ONE_ARGUMENT),
	[V3_I_JNE_INSTRUCTION] =   DEFINE_INSTRUCTION("JNE", ONE_ARGUMENT),
	[V3_I_JG_INSTRUCTION] =    DEFINE_INSTRUCTION("JG",  ONE_ARGUMENT),
	[V3_I_JGE_INSTRUCTION] =   DEFINE_INSTRUCTION("JGE", ONE_ARGUMENT),
	[V3_I_JL_INSTRUCTION] =    DEFINE_INSTRUCTION("JL",  ONE_ARGUMENT),
	[V3_I_JLE_INSTRUCTION] =   DEFINE_INSTRUCTION("JLE", ONE_ARGUMENT),
	[V3_I_JC_INSTRUCTION] =    DEFINE_INSTRUCTION("JC",  ONE_ARGUMENT),
	[V3_I_JNC_INSTRUCTION] =   DEFINE_INSTRUCTION("JNC", ONE_ARGUMENT),
	[V3_I_JZ_INSTRUCTION] =    DEFINE_INSTRUCTION("JZ",  ONE_ARGUMENT),
	[V3_I_JNZ_INSTRUCTION] =   DEFINE_INSTRUCTION("JNZ", ONE_ARGUMENT),
	[V3_I_PUSH_INSTRUCTION] =  DEFINE_INSTRUCTION("PUSH", ONE_ARGUMENT),
	[V3_I_POP_INSTRUCTION] =   DEFINE_INSTRUCTION("POP",  ONE_ARGUMENT),
	
	[V3_I_DB_INSTRUCTION] = DEFINE_INSTRUCTION("DB", N_ARGUMENTS),
	[V3_I_DS_INSTRUCTION] = DEFINE_INSTRUCTION("DS", N_ARGUMENTS)
};

enum {
	V3_I_REG_AR = 1,
	V3_I_REG_BR,
	V3_I_REG_CR,
	V3_I_REG_DR,
	V3_I_REG_ER,
	V3_I_REG_FR,
	V3_I_REG_GR,
	V3_I_REG_HR,
	V3_I_REG_BP,
	V3_I_REG_SP,
	V3_I_REG_IP,
	V3_I_REG_I1,
	V3_I_REG_I2,
	V3_I_REG_I3,
	V3_I_REG_I4,
	V3_I_REG_I5,
	V3_I_REG_I6,
	V3_I_REG_I7,
	V3_I_REG_I8,
	V3_I_REG_MAX
};

static const char* V3_REGISTERS[] = {
	[V3_I_REG_AR] = "AR",
	[V3_I_REG_BR] = "BR",
	[V3_I_REG_CR] = "CR",
	[V3_I_REG_DR] = "DR",
	[V3_I_REG_ER] = "AR",
	[V3_I_REG_FR] = "BR",
	[V3_I_REG_GR] = "CR",
	[V3_I_REG_HR] = "DR",

	[V3_I_REG_BP] = "BP",
	[V3_I_REG_SP] = "SP",
	[V3_I_REG_IP] = "IP",

	[V3_I_REG_I1] = "I1",
	[V3_I_REG_I2] = "I2",
	[V3_I_REG_I3] = "I3",
	[V3_I_REG_I4] = "I4",
	[V3_I_REG_I5] = "I5",
	[V3_I_REG_I6] = "I6",
	[V3_I_REG_I7] = "I7",
	[V3_I_REG_I8] = "I8",
};
// End

void* proccess_cycle(void* arg);
void init_emulator();

#endif